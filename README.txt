=== nvpro-pipeline ===

Requirements:
- Visual C++ 2012 x64 or newer
  - Further platforms need to be added to the 3rdparty build scripts.
- CMake 2.8.12
- The pipeline should also build on Linux. This feature is less tested.

Building:
- Install Qt 5.2.1 MSVC 2012 OpenGL or newer (5.4 prefered) through the installer from http://qt.io
- Ensure that cmake can be launched from the command line.
- Open 3rdPartyBuild.cmake and choose which dependencies do configure.
- Call 3rdPartyBuild.cmd. This will download and build all required dependencies.
  - This script also creates a builds subfolder where the build files will be placed
- Start the CMake GUI, specify the source code location and choose a subfolder in builds, i.e. builds/vc12-amd64, to build the binaries.
  - The 3rdPartyBuild.cmd will choose the newest version of Visual Studio, choose accordingly or change the script to use the desired Visual Studio version
  - Supported Generators
    - 'Visual Studio 12 2013 Win64'
    - 'Visual Studio 11 2012 Win64'
- Open builds/vc11-amd64/Pipeline.sln in Visual Studio and hit build.

The binaries can be found in the folder builds\vc11-amd64\bin\(Debug|Release). You'll have to copy the required 3rd party dlls from the 3rdparty folders to the binary directory. This will be done automatically soon.

Small overview over the pipeline:

Shader Generators:

The RiX-Pipeline has dp::fx as module to generate shaders based on a simple XML description. Shaders are being separated into the main block and the different parts of the header, especially
the parameters. The GLSL code for the main block has to be specified by the shader writer while the GLSL code for the headers is being fully generated by dp::fx. This separation makes
parameter passing by the pipeline extremely flexible. Currently we support the following paramter generation backends:

- rixfx:uniform Each parameter is being passed to OpenGL with a glUniform call
- rixfx:ubo140 One OpenGL buffer is being created for each ParameterGroupData and passed as UBO to GL.
- rixfx:shaderbufferload One OpenGL buffer is being created for each ParameterGroupData and passed as bindless pointer to GL. (fastest on CPU side)
- rixfx:ssbo140 One OpenGL buffer is being created for 256 ParameterGroupDatas and passed as ShaderStorageBufferObject to OpenGL.
                In addition to this RiX get's another ParameterGroupData with an index into this buffer as uniform. This configuration requires OpenGL 4.3.

If there's buffer/texture within a ParameterGroupData the pipeline will always use rixfx:uniform

RenderEngines:

OpenGL supports different ways to specify vertices/indices depending on the OpenGL version and supported extensions by the driver. RiX has implemented support for the following methods

- VBO All buffers are being passed to OpenGL by glBindBuffer/glVertexAttrib* functions. This is supported on (nearly) all GPUs.
- VAB Required GL 4.3 or GL_ARB_vertex_attrib_binding. The vertex format is being separated from the buffer bindings. Gives up to 10% speedup over VBO.
- VBOVAO Generates one Vertex Array Object (VAO) with VBOs per geometry. This is usually slower than VBOs due to cache inefficiency.
- Bindless Uses GL_NV_vertex_buffer_unified memory. This extension separates format and buffers. Vertex pointer are being passed as 64-bit pointers.
           This is the fastest engine when using only a single OpenGL context.
- BindlessVAO Generates one Vertex Array Object (VAO) with Bindless pointers per geometry. This is usually slower than Bindless due to cache inefficiency.
- DisplayList Only for testing. Currently slow due to some limitations in the implementation.


Important modules in the dphome folder:
- dp::fx Shader Managment/Generation
- dp::rix Base directory for all rendering based module
- dp::rix:gl RiX based OpenGL renderer
- dp::rix::fx Connection between dp::fx and dp::rix::gl
- dp::math our math functions
- dp::util misc utility functions
- dp::sg Scenegraph
- dp::sg::xbar crossbar interface which converts a scenegraph to a flat list. SceniXXBAR is the rix-gl interface for this
- dp::culling culling interface we're going to use in the xbar in the future.
